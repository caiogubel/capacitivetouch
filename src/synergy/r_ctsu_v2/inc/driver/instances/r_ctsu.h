/***********************************************************************************************************************
 * Copyright [2017] Renesas Electronics Corporation and/or its licensors. All Rights Reserved.
 *
 * This file is part of Renesas SynergyTM Software Package (SSP)
 *
 * The contents of this file (the "contents") are proprietary and confidential to Renesas Electronics Corporation
 * and/or its licensors ("Renesas") and subject to statutory and contractual protections.
 *
 * This file is subject to a Renesas SSP license agreement. Unless otherwise agreed in an SSP license agreement with
 * Renesas: 1) you may not use, copy, modify, distribute, display, or perform the contents; 2) you may not use any name
 * or mark of Renesas for advertising or publicity purposes or in connection with your use of the contents; 3) RENESAS
 * MAKES NO WARRANTY OR REPRESENTATIONS ABOUT THE SUITABILITY OF THE CONTENTS FOR ANY PURPOSE; THE CONTENTS ARE PROVIDED
 * "AS IS" WITHOUT ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, AND NON-INFRINGEMENT; AND 4) RENESAS SHALL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, OR
 * CONSEQUENTIAL DAMAGES, INCLUDING DAMAGES RESULTING FROM LOSS OF USE, DATA, OR PROJECTS, WHETHER IN AN ACTION OF
 * CONTRACT OR TORT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THE CONTENTS. Third-party contents
 * included in this file may be subject to different terms.
 **********************************************************************************************************************/

/**********************************************************************************************************************
 * File Name    : r_ctsu.h
 * Description  : CTSU HAL layer APIs.
 **********************************************************************************************************************/


/*******************************************************************************************************************//**
 * @ingroup HAL_Library
 * @defgroup CTSU CTSU
 * @brief Driver for the Capacitive Touch Sensing Unit (CTSU).
 *
 * @{
 **********************************************************************************************************************/


#ifndef R_CTSU_H
#define R_CTSU_H

/***********************************************************************************************************************
 * Includes
 **********************************************************************************************************************/
#include "bsp_api.h"
#include "stdlib.h"

#if ((BSP_MCU_GROUP_S7G2 == 1) || (BSP_MCU_GROUP_S3A7 == 1) || (BSP_MCU_GROUP_S124 == 1) || (BSP_MCU_GROUP_S128 == 1))
#include "../../../src/driver/r_ctsu/hw/r_ctsu_sfr_access_synergy.h"
#endif

#include "r_ctsu_cfg.h"
#include "r_ctsu_api.h"

/***********************************************************************************************************************
 * Macro definitions
 **********************************************************************************************************************/
#define CTSU_CODE_VERSION_MAJOR (1)
#define CTSU_CODE_VERSION_MINOR (2)


/***********************************************************************************************************************
 * Typedef definitions
 **********************************************************************************************************************/
#if !defined(BSP_LOCKING_H_)&& !defined(BSP_LOCK_T)
#define BSP_LOCK_T
/** Lock structure. Passed into software locking functions such as R_BSP_SoftwareLock() and R_BSP_SoftwareUnLock. */
typedef struct st_bsp_lock
{
    uint8_t lock; ///< A uint8_t is used instead of a enum because the size must be 8-bits.
} bsp_lock_t;
#endif /* !defined(BSP_LOCKING_H_) */

/**
 * Types and order of counter values generated by the CTSU when measuring capacitance.
 */
typedef enum e_sensor_count_t
{
    OFFSET_PRIMARY_SENSOR_COUNT = 0,     ///< Index of primary sensor ICO in CTSU sensor measurement
    OFFSET_PRIMARY_REFERENCE_COUNT = 1,  ///< Index of primary reference ICO in CTSU sensor measurement
    OFFSET_SECONDARY_SENSOR_COUNT = 2,   ///< Index of secondary sensor ICO in CTSU sensor measurement
    OFFSET_SECONDARY_REFERENCE_COUNT = 3,///< Index of secondary reference ICO in CTSU sensor measurement
}sensor_count_t;

/**
 * Enumerates currents provided in ideal sensor ICO table.
 */
typedef enum
{
    _19_2UA = 0,///< Index of Sensor ICO value when sensor drive is at 19.2uA
    _18_0UA,    ///< Index of Sensor ICO value when sensor drive is at 18.0uA
    _16_8UA,    ///< Index of Sensor ICO value when sensor drive is at 16.8uA
    _15_6UA,    ///< Index of Sensor ICO value when sensor drive is at 15.6uA
    _14_4UA,    ///< Index of Sensor ICO value when sensor drive is at 14.4uA
    _13_2UA,    ///< Index of Sensor ICO value when sensor drive is at 13.2uA
    _12_0UA,    ///< Index of Sensor ICO value when sensor drive is at 12.0uA
    _10_8UA,    ///< Index of Sensor ICO value when sensor drive is at 10.8uA
    _09_6UA,    ///< Index of Sensor ICO value when sensor drive is at 09.6uA
    _08_4UA,    ///< Index of Sensor ICO value when sensor drive is at 08.4uA
    _07_2UA,    ///< Index of Sensor ICO value when sensor drive is at 07.2uA
    _06_0UA,    ///< Index of Sensor ICO value when sensor drive is at 06.0uA
    _04_8UA,    ///< Index of Sensor ICO value when sensor drive is at 04.8uA
    _03_6UA,    ///< Index of Sensor ICO value when sensor drive is at 03.6uA
    _02_4UA,    ///< Index of Sensor ICO value when sensor drive is at 02.4uA
    _01_2UA     ///< Index of Sensor ICO value when sensor drive is at 01.2uA
}sensor_current_t;


/**
 * Definition of a CTSU operation handle (used to copy information from the configuration, and operate CTSU in specified mode).
 */
typedef struct st_ctsu_ctrl
{
        ctsu_const_sfrs_t * p_ctsu_settings;    ///< CTSU SFRs associated with CTSU operation with this handle (Common to all sensors).
        ctsu_sensor_setting_t* p_sensor_settings;   ///< CTSU SFRs associated with each sensor in this handle (Unique to each sensor).
        void * p_sensor_data;                       ///< Location in memory where CTSU measurement data is output. (@ref st_ctsu_ctrl_blk::num_sensors).
        uint32_t pclkb_hz;                  ///< Holds the frequency with which PCLKB should be running to scan this handle.
        ctsu_mode_t mode;                   ///< Indicates the operating mode of the CTSU.
        uint16_t num_sensors;               ///< Holds the number of sensors being operated with this channel.
        uint16_t num_wr_irq_requests;       ///< Expected number of write requests that will occur during a complete scan. Should equal to @ref num_sensors.
        uint16_t num_rd_irq_requests;       ///< Expected number of read requests that will occur during a complete scan. Should equal -OR- 2x  @ref num_sensors.
        ctsu_callback_t p_callback;          ///< Pointer to upper layer function (used for event notifications).
        uint8_t const tscal_pin;            ///< TS pin used for calibration (must have a 12pF capacitor connected to it).
        uint16_t const * const p_correction_ideal_sensor_ico;       ///< CTSU correction factor for primary sensor count readings measured from MCU used for calibration.
        uint16_t * const p_linear_interpolation_table;              ///< Pointer to a table containing sensor ICO values for this MCU. 61 16-bit data points.
        uint16_t * const p_linear_interpolation_coeff;              ///< Pointer to a table containing correction coefficients for this MCU. 61 16-bit data points.
        int8_t * const p_magnification_sensor;                      ///< A magnification factor. 8 bit data point x @ref st_ctsu_ctrl_blk::num_sensors.

        uint32_t open;                      ///< Value 0x4F50454e indicates handle was opened by a call to @ref R_CTSU_Open.
        uint16_t upper_level_count;         ///< Value indicating how many upper layers are using this configuration.
        uint32_t scan_errors;                       ///< Holds the information about any errors that may have occured during last scan.
        bool reload;
        bsp_lock_t lock;                    ///< Binary lock (using xchg instruction) to prevent multiple functions from simultaneous access to same handle.
        uint32_t safety;                    ///< Flag which (set to 0x53414645) identifies that this control block is subject to diagnostic and integrity checking.
        uint32_t checksum;                  ///< Holds the checksum for the block
}ctsu_instance_ctrl_t;                           ///< Refer: @ref st_ctsu_ctrl_blk
/**********************************************************************************************************************
 * Exported global variables
 **********************************************************************************************************************/
/** @cond INC_HEADER_DEFS_SEC */
extern const ctsu_api_t g_ctsu_on_ctsu;
/** @endcond */

#endif // R_CTSU_H

/*******************************************************************************************************************//**
 * @} (end defgroup CTSU)
 **********************************************************************************************************************/
