<?xml version="1.0" ?>
<synergyModuleDescription>
   <!-- CTSU Tuning XML START here-->
   <config id="config.framework.sf_ctsu_tuning" path="ssp_cfg/framework/sf_ctsu_tuning_cfg.h" version="0">
        <property default="config.framework.sf_ctsu_tuning.param_check.default" display="Parameter Checking" id="config.framework.sf_ctsu_tuning.param_check">
            <option display="Default(BSP)" id="config.framework.sf_ctsu_tuning.param_check.default" value="BSP_CFG_PARAM_CHECKING_ENABLE"/>
            <option display="Disabled" id="config.framework.sf_ctsu_tuning.param_check.false" value="0"/>
            <option display="Enabled" id="config.framework.sf_ctsu_tuning.param_check.true" value="1"/>
        </property>
        <property default="config.framework.sf_ctsu_tuning.connection.usb" display="Tuning Interface" id="config.framework.sf_ctsu_tuning.connection">
            <option display="Using Communication Frameworks" id="config.framework.sf_ctsu_tuning.connection.usb" value="1"/>
			<option display="Using SCI UART Driver" id="config.framework.sf_ctsu_tuning.connection.sci" value="2"/>
            <!--<option display="Debugger" id="config.framework.sf_ctsu_tuning.connection.debugger" value="0"/>-->
        </property>
		<property default="2" display="Command Size Check count (Do Not Modify)" id="config.framework.sf_ctsu_tuning.check_size">
            <constraint display="Value must be a non-negative integer">testInteger("${config.framework.sf_ctsu_tuning.check_size}")  &amp;&amp; ("${config.framework.sf_ctsu_tuning.check_size}" &gt; 0)</constraint>
        </property>
		<property default="3" display="Command Header Size (Do Not Modify)" id="config.framework.sf_ctsu_tuning.header_size">
            <constraint display="Value must be a non-negative integer">testInteger("${config.framework.sf_ctsu_tuning.header_size}")  &amp;&amp; ("${config.framework.sf_ctsu_tuning.header_size}" &gt; 0)</constraint>
        </property>
		
		
        <property default="1" display="Thread Priority" id="config.framework.sf_ctsu_tuning.priority">
            <constraint display="Value must be a non-negative integer">testInteger("${config.framework.sf_ctsu_tuning.priority}")  &amp;&amp; ("${config.framework.sf_ctsu_tuning.priority}" &gt;= 0)</constraint>
        </property>
        <property default="1024" display="Host Communication Thread Stack Size" id="config.framework.sf_ctsu_tuning.stack">
            <constraint display="Value must be a non-negative integer">testInteger("${config.framework.sf_ctsu_tuning.stack}")  &amp;&amp; ("${config.framework.sf_ctsu_tuning.stack}" &gt; 0)</constraint>
        </property>
        <content>
        
        #define SF_CTSU_TUNING_CFG_PARAM_CHECK      (${config.framework.sf_ctsu_tuning.param_check})
        
        #define SF_CTSU_TUNING_CFG_CONNECTION       (${config.framework.sf_ctsu_tuning.connection})
        
        #define SF_CTSU_TUNING_CFG_THREAD_PRIORITY  (${config.framework.sf_ctsu_tuning.priority})
        
        #define SF_CTSU_TUNING_CFG_THREAD_STACK_SIZE    (${config.framework.sf_ctsu_tuning.stack})
		
		#define SF_CTSU_TUNING_CFG_SCI_SIZE_CHECK_COUNT            (${config.framework.sf_ctsu_tuning.check_size})
		
		#define SF_CTSU_TUNING_CFG_SCI_BASE_DATA_SIZE              (${config.framework.sf_ctsu_tuning.header_size})
		
		#define WORKBENCH_COMMAND_USE			(1)
        </content>
    </config>
    
    <module config="config.framework.sf_ctsu_tuning" display="Framework|Input|${module.framework.sf_ctsu_tuning.name} CTSU Tuning Framework on sf_ctsu_tuning" common="100" id="module.framework.sf_ctsu_tuning" version="1">
        <constraint display="Unique name required for each instance">
            "${interface.framework.sf_ctsu_tuning.${module.framework.sf_ctsu_tuning.name}}" === "1"
        </constraint>
        <requires id="module.framework.sf_ctsu_tuning.requires.ctsu" interface="interface.driver.ctsu_v2" display="Needs CTSU V2 HAL Driver">
                <override property="module.driver.ctsu.data" value="module.driver.data.generated"/>
                <override property="module.driver.ctsu.p_callback" value="serial_control_callback"/>
        </requires>
        <provides interface="interface.framework.sf_ctsu_tuning" />
        <provides interface="interface.framework.sf_ctsu_tuning.${module.framework.sf_ctsu_tuning.name}" />
        <property default="g_sf_ctsu_tuning${_instance}" display="Name" id="module.framework.sf_ctsu_tuning.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_ctsu_tuning.name}")</constraint>
        </property>
        <property default="${_instance}" display="Index (Do Not Modify)" id="module.framework.sf_ctsu_tuning.count"> 
            <constraint display="Value must be a non-negative integer">testInteger("${module.framework.sf_ctsu_tuning.count}")  &amp;&amp; ("${module.framework.sf_ctsu_tuning.count}" &gt;= 0) &amp;&amp; ("${module.framework.sf_ctsu_tuning.count}" &lt; 8)</constraint>
        </property>
		<property default="g_comms" display="Communication Interface" id="module.framework.sf_ctsu_tuning.comms">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_ctsu_tuning.comms}")</constraint>
        </property>
		
        
        <header>
        
        extern sf_ctsu_tuning_instance_t const ${module.framework.sf_ctsu_tuning.name};
        </header>
        <includes>
        #include &quot;sf_ctsu_tuning_cfg.h&quot;
        #include &quot;sf_ctsu_tuning.h&quot;
		#if (SF_CTSU_TUNING_CFG_CONNECTION==2)
		#include &quot;r_uart_api.h&quot;
		#elif (SF_CTSU_TUNING_CFG_CONNECTION==1)
		#include &quot;sf_comms_api.h&quot;
		#endif
        </includes>
        <declarations>
		
		#if (SF_CTSU_TUNING_CFG_CONNECTION==2)
		extern uart_instance_t const ${module.framework.sf_ctsu_tuning.comms};
		#else
		extern sf_comms_instance_t const ${module.framework.sf_ctsu_tuning.comms};
		#endif
        
        sf_ctsu_tuning_instance_ctrl_t const ${module.framework.sf_ctsu_tuning.name}_ctrl;
        
        sf_ctsu_tuning_cfg_t ${module.framework.sf_ctsu_tuning.name}_cfg =
        {
            .index = ${module.framework.sf_ctsu_tuning.count},
		#if (SF_CTSU_TUNING_CFG_CONNECTION > 0)
            .p_comms = &amp;${module.framework.sf_ctsu_tuning.comms},
		#else
			.p_comms = NULL,
		#endif
            .p_ctsu = &amp;${module.framework.sf_ctsu_tuning.requires.ctsu::module.driver.ctsu.name},
        };
        
        sf_ctsu_tuning_instance_t const ${module.framework.sf_ctsu_tuning.name} = 
        {
            .p_ctrl = &amp;${module.framework.sf_ctsu_tuning.name}_ctrl,
            .p_api = &amp;g_ctsu_tuning_api,
            .p_cfg = &amp;${module.framework.sf_ctsu_tuning.name}_cfg,
        };
        
        </declarations>
        <init>
        <!-- ssp_err_t ssp_err_${module.framework.sf_ctsu_tuning.name}; -->
        <!-- ssp_err_${module.framework.sf_ctsu_tuning.name} = ${module.framework.sf_ctsu_tuning.name}.p_api->open(${module.framework.sf_ctsu_tuning.name}.p_ctrl, ${module.framework.sf_ctsu_tuning.name}.p_cfg); -->
        <!-- if (SSP_SUCCESS != ssp_err_${module.framework.sf_ctsu_tuning.name}) -->
        <!-- { -->
            <!-- BSP_CFG_HANDLE_UNRECOVERABLE_ERROR(0); -->
        <!-- } -->
        </init>
    </module>
    <!-- CTSU Tuning XML END here-->
    
</synergyModuleDescription>