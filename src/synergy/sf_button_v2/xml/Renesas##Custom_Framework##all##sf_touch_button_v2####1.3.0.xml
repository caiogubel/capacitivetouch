<?xml version="1.0" ?>
<synergyModuleDescription>
    <!-- Touch Button XML START here-->
    <config id="config.framework.sf_touch_button_v2" path="ssp_cfg/framework/sf_touch_button_cfg.h" version="0">
        <property default="config.framework.sf_touch_button_v2.param_checking_enable.enabled" display="Parameter Checking Enable" id="config.framework.sf_touch_button_v2.param_checking_enable">
            <option display="Enabled" id="config.framework.sf_touch_button_v2.param_checking_enable.enabled" value="1"/>
            <option display="Disabled" id="config.framework.sf_touch_button_v2.param_checking_enable.disabled" value="0"/>
        </property>
        <property default="1" display="Max. Open Button Count" id="config.framework.sf_touch_button_v2.max_count">
            <constraint display="Value must be in range (1-36)">testInteger("${config.framework.sf_touch_button_v2.max_count}")  &amp;&amp; ("${config.framework.sf_touch_button_v2.max_count}" &gt;= 0) &amp;&amp; ("${config.framework.sf_touch_button_v2.max_count}" &lt; 36)</constraint>
        </property>
    <content>
        /**
         * Specify whether to include code for API parameter checking. Valid settings include:
         *    - 1 : Includes parameter checking
         *    - 0 : Compiles out parameter checking
         */
         #define BUTTON_CFG_PARAM_CHECKING_ENABLE         (${config.framework.sf_touch_button_v2.param_checking_enable})
        
        /**
         * Specify the maximum number of buttons which will be ready to run at a given time.
         */
         #define BUTTON_CFG_MAX_CONTROL_BLOCK_COUNT     (${config.framework.sf_touch_button_v2.max_count})
         
    </content>
    </config>
    <module config="config.framework.sf_touch_button_v2" display="Framework|Input|${module.framework.sf_touch_button.name} Capacitive Touch Button on sf_touch_button_v2" id="module.framework.sf_touch_button_v2" common="100" version="1">
        <constraint display="Unique name required for each instance">
            "${interface.framework.sf_touch_button.${module.framework.sf_touch_button.name}}" === "1"
        </constraint>
        
        <requires id="module.framework.sf_touch_button.requires.touch" interface="interface.driver.touch" display="Add TOUCH V2 Driver"/>
        <requires id="module.framework.sf_touch_button.requires.ctsu_sensor" interface="interface.driver.ctsu_sensor" display="Add Capacitive Touch Sensor"/>
        
        <provides interface="interface.framework.sf_touch_button" />
        <provides interface="interface.framework.sf_touch_button" />
        <provides interface="interface.framework.sf_touch_button.${module.framework.sf_touch_button.name}" />
        
        <property default="g_touch_button${_instance}" display="Name" id="module.framework.sf_touch_button.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_touch_button.name}")</constraint>
        </property>
        <property default="module.framework.sf_touch_button.press_enable.enabled" display="Generate Button Event on Touch" id="module.framework.sf_touch_button.press_enable">
            <option display="Enabled" id="module.framework.sf_touch_button.press_enable.enabled" value="true"/> 
            <option display="Disabled" id="module.framework.sf_touch_button.press_enable.disabled" value="false"/>
        </property>
        <property default="module.framework.sf_touch_button.release_enable.enabled" display="Generate Button Event on Release" id="module.framework.sf_touch_button.release_enable">
            <option display="Enabled" id="module.framework.sf_touch_button.release_enable.enabled" value="true"/> 
            <option display="Disabled" id="module.framework.sf_touch_button.release_enable.disabled" value="false"/>
        </property>
        <!--<property default="module.framework.sf_touch_button.hold_enable.disabled" display="Generate Button Event on Touch-Hold-Release" id="module.framework.sf_touch_button.hold_enable">
            <option display="Enabled" id="module.framework.sf_touch_button.hold_enable.enabled" value="1"/> 
            <option display="Disabled" id="module.framework.sf_touch_button.hold_enable.disabled" value="0"/>
        </property>-->
        <property default="1" display="Debounce" id="module.framework.sf_touch_button.debounce">
            <constraint display="Value must be a non-negative integer">testInteger("${module.framework.sf_touch_button.debounce}")  &amp;&amp; ("${module.framework.sf_touch_button.debounce}" &gt;= 0)</constraint>
        </property>
        <!-- <property default="10" display="Maximum Duration for valid Hold" id="module.framework.sf_touch_button.hold_max">
            <constraint display="Value must be a non-negative integer">testInteger("${module.framework.sf_touch_button.hold_max}")  &amp;&amp; ("${module.framework.sf_touch_button.hold_max}" &gt;= 0)</constraint>
        </property> -->
        <property id="module.framework.sf_touch_button.p_callback" display="Callback Function for events" default="button_user_callback">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_touch_button.p_callback}")</constraint>
        </property>
        
        <header>
         /** SF Touch Button instance */
        extern touch_button_instance_t ${module.framework.sf_touch_button.name};
        #ifndef ${module.framework.sf_touch_button.p_callback}_defined
        #define ${module.framework.sf_touch_button.p_callback}_defined
        /** Declaration of user callback function. This function MUST be defined in the user application.*/
        void ${module.framework.sf_touch_button.p_callback}(touch_button_callback_arg_t * p_args);
        #endif
        </header>
        <includes>
        #include &quot;sf_touch_button.h&quot;
        </includes>
        <declarations>
        #if (DATA_SOURCE == DATA_SOURCE_SSPCONFIG)
        touch_button_instance_ctrl_t ${module.framework.sf_touch_button.name}_ctrl;
        touch_button_cfg_t ${module.framework.sf_touch_button.name}_cfg =
        {
            .button.tx              = ${module.framework.sf_touch_button.requires.ctsu_sensor::module.driver.ctsu_sensor.name}_TS_TX,
            .button.rx              = ${module.framework.sf_touch_button.requires.ctsu_sensor::module.driver.ctsu_sensor.name}_TS_RX,
            .p_touch                = &amp;${module.framework.sf_touch_button.requires.touch::module.driver.touch.name},
            .enable.bit.reserved    = 0,
            .enable.bit.hold            = false,
            .enable.bit.press           = ${module.framework.sf_touch_button.press_enable},
            .enable.bit.release         = ${module.framework.sf_touch_button.release_enable},
            .debounce               = ${module.framework.sf_touch_button.debounce},
            .hold_max               = 65535,
            .p_callback             = ${module.framework.sf_touch_button.p_callback},
        };
        touch_button_instance_t ${module.framework.sf_touch_button.name} =
        {
            .p_ctrl = &amp;${module.framework.sf_touch_button.name}_ctrl,
            .p_cfg  = &amp;${module.framework.sf_touch_button.name}_cfg,
            .p_api  = &amp;g_touch_button_on_touch_button,
        };
        #endif /* (DATA_SOURCE == DATA_SOURCE_SSPCONFIG) */

        </declarations>
        <init>
        {
            /* Open the ${module.framework.sf_touch_button.name} button Instance */
            touch_button_err_t err = ${module.framework.sf_touch_button.name}.p_api->open(${module.framework.sf_touch_button.name}.p_ctrl, ${module.framework.sf_touch_button.name}.p_cfg);
            
            /* Wait here if open fails */
            while(TOUCH_BUTTON_SUCCESS!=err);
        }
        </init>
    </module>
    <!-- Touch Button XML END here-->
</synergyModuleDescription>
